@model PolicyPro360.Models.Policy

@{
    ViewData["Title"] = "View Policy Details - PolicyPro360";
    Layout = "_UserLayout";
}

<style>
    .policy-details-final-page {
        background-color: #1c1d2e;
        padding: 50px 0;
    }


    .policy-main-content {
        background-color: #171827;
        border-radius: 12px;
        padding: 30px 40px;
    }

        .policy-main-content .policy-image-container {
            border-radius: 8px;
            overflow: hidden;
            margin-bottom: 25px;
        }

        .policy-main-content .policy-title {
            color: #ffffff;
            font-weight: 700;
            font-size: 2.2rem;
            margin-bottom: 15px;
        }

        .policy-main-content .policy-description {
            color: #a9b3c1;
            font-size: 1rem;
            line-height: 1.7;
            margin-bottom: 30px;
            display: flex;
            align-items: flex-start;
        }

            .policy-main-content .policy-description::before {
                content: '';
                display: inline-block;
                width: 10px;
                height: 10px;
                background-color: #f5a526;
                border-radius: 50%;
                margin-right: 15px;
                margin-top: 8px;
                flex-shrink: 0;
            }


    .key-metrics-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 20px;
        margin-bottom: 30px;
    }

    .metric-box {
        background-color: #2a2c41;
        padding: 20px;
        border-radius: 8px;
        border-left: 3px solid #f5a526;
    }

        .metric-box .metric-label {
            color: #a9b3c1;
            font-size: 0.85rem;
            text-transform: uppercase;
            margin-bottom: 8px;
        }

        .metric-box .metric-value {
            color: #ffffff;
            font-size: 1.4rem;
            font-weight: 600;
        }

            .metric-box .metric-value i {
                color: #f5a526;
                margin-right: 10px;
            }


    .details-section-heading {
        color: #ffffff;
        font-weight: 600;
        font-size: 1.4rem;
        margin-top: 30px;
        margin-bottom: 15px;
    }

    .details-list {
        list-style: none;
        padding-left: 0;
        color: #a9b3c1;
    }

        .details-list li {
            display: flex;
            align-items: flex-start;
            margin-bottom: 12px;
            line-height: 1.6;
        }

            .details-list li::before {
                content: '●';
                color: #f5a526;
                margin-right: 12px;
                font-size: 0.8rem;
                margin-top: 5px;
            }



    .policy-sidebar {
        background-color: #171827;
        border-radius: 12px;
        padding: 25px;
        position: sticky;
        top: 100px; 
    }


    .sidebar-company-header {
        text-align: center;
        padding-bottom: 20px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        margin-bottom: 20px;
    }

        .sidebar-company-header .logo-container img {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            object-fit: contain; 
            background-color: #ffffff; 
            padding: 5px;
            margin-bottom: 15px;
        }

        .sidebar-company-header .company-name {
            color: #ffffff;
            font-size: 1.2rem;
            font-weight: 600;
        }

        .sidebar-company-header .company-tagline {
            color: #a9b3c1;
            font-size: 0.85rem;
        }


    .sidebar-details-item {
        padding: 10px 0;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

        .sidebar-details-item .item-label {
            color: #a9b3c1;
            font-size: 0.8rem;
            text-transform: uppercase;
            margin-bottom: 5px;
        }

        .sidebar-details-item .item-value {
            color: #ffffff;
            font-size: 1rem;
            font-weight: 500;
        }

            .sidebar-details-item .item-value.status-active {
                color: #28a745;
                font-weight: 700;
            }

            .sidebar-details-item .item-value.status-inactive {
                color: #dc3545;
                font-weight: 700;
            }


    .sidebar-contact-info {
        padding-top: 15px;
    }

        .sidebar-contact-info .contact-item {
            display: flex;
            align-items: center;
            color: #a9b3c1;
            font-size: 0.9rem;
            margin-bottom: 10px;
        }

        .sidebar-contact-info i {
            color: #f5a526;
            margin-right: 12px;
            width: 16px;
        }

    .sidebar-button {
        display: block;
        width: 100%;
        padding: 14px;
        background-color: #f5a526;
        color: #171827;
        text-align: center;
        font-size: 1rem;
        font-weight: 800;
        border-radius: 8px;
        text-decoration: none;
        transition: all 0.3s ease;
        margin-top: 20px;
    }

     .sidebar-button:hover {
            background-color: #ffffff;
            color: #171827;
               font-weight: 800;
     }

    .compare-bar {
        position: fixed;
        left: 0;
        right: 0;
        bottom: 0;
        background: #171827;
        border-top: 2px solid #f5a526;
        padding: 10px 16px;
        z-index: 1050;
        display: none;
    }

    .compare-pill {
        background: #2a2c41;
        color: #fff;
        border: 1px solid rgba(245,165,38,.4);
        border-radius: 999px;
        padding: 6px 12px;
        margin-right: 8px;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

        .compare-pill button {
            border: 0;
            background: transparent;
            color: #f5a526;
        }

    .compare-btn {
        background: #f5a526;
        color: #171827;
        border: 0;
        padding: 8px 16px;
        border-radius: 6px;
        font-weight: 700;
    }

        .compare-btn:disabled {
            opacity: .6;
            cursor: not-allowed;
        }

    .compare-toast {
        position: fixed;
        bottom: 90px;
        right: 20px;
        background: #2a2c41;
        color: #fff;
        border: 1px solid rgba(245,165,38,.4);
        padding: 10px 14px;
        border-radius: 8px;
        z-index: 1100;
        display: none;
    }

    .compare-table thead th {
        position: sticky;
        top: 0;
        background: #1e2032;
        z-index: 2;
        border-bottom: 1px solid rgba(255,255,255,.08);
    }

    .compare-table .sticky-col {
        position: sticky;
        left: 0;
        background: #1e2032;
        z-index: 3;
    }

    .compare-table tbody th.sticky-col {
        background: #1e2032;
    }

    .compare-table tbody tr:nth-child(odd) {
        background-color: rgba(255,255,255,.02);
    }

    .compare-table td, .compare-table th {
        vertical-align: middle;
    }

    .compare-table td {
        border-color: rgba(255,255,255,.06);
    }

    .modal-content {
        border-radius: 12px;
        border: 1px solid rgba(255,255,255,.08);
    }


    .btn-compare {
        border-radius: 999px;
        border: 1px solid rgba(245,165,38,.6);
        color: #f5a526;
        background: transparent;
        padding: 10px 14px;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        transition: all .25s ease;
    }

        .btn-compare:hover {
            background: #f5a526;
            color: #171827;
            border-color: #f5a526;
            transform: translateY(-1px);
        }
    
</style>
<!-- Page Header Start -->
<section class="page-header">
    <div class="page-header-bg" style="background-image: url('@Url.Content("~/user/assets/images/backgrounds/loan-policy-bg.jpg")')"></div>
    <div class="page-header-shape-1"><img src="@Url.Content("~/user/assets/images/shapes/page-header-shape-1.png")" alt=""></div>
    <div class="container">
        <div class="page-header__inner">
            <ul class="thm-breadcrumb list-unstyled">
                <li><a href="/">Home</a></li>
                <li><span>/</span></li>
                <li><a href="@Url.Action("Policy", "UserHome")">Policies</a></li>
                <li><span>/</span></li>
                <li>Details</li>
            </ul>
            <h2>@Model?.Name</h2>
        </div>
    </div>
</section>
<!-- Page Header End -->
<!-- Final Page Layout Start -->
<section class="policy-details-final-page">
    <div class="container">
        <div class="row">
            <!-- Left Column: Main Policy Details -->
            <div class="col-lg-8 mb-4 mb-lg-0">
                <div class="policy-main-content">
                    <div class="policy-image-container">
                        <img src="@Url.Content("~" + (Model?.BrochureUrl ?? "/user/assets/images/project/default-large.jpg"))"
                             alt="Policy Brochure" class="img-fluid w-100" />
                    </div>

                    <h1 class="policy-title">@Model?.Name</h1>
                    <p class="policy-description">@Model?.Description</p>

                    <div class="key-metrics-grid">
                        <div class="metric-box">
                            <div class="metric-label">Sum Insured</div>
                            <div class="metric-value"><i class="fas fa-shield-alt"></i> @Model?.SumInsured.ToString("N0") PKR</div>
                        </div>
                        <div class="metric-box">
                            <div class="metric-label">Premium</div>
                            <div class="metric-value"><i class="fas fa-dollar-sign"></i> @Model?.Premium.ToString("N0") PKR</div>
                        </div>
                        <div class="metric-box">
                            <div class="metric-label">Tenure</div>
                            <div class="metric-value"><i class="fas fa-calendar-alt"></i> @Model?.Tenure</div>
                        </div>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(Model?.TermsConditions))
                    {
                        <h3 class="details-section-heading">Terms & Conditions</h3>
                        <ul class="details-list">
                            @foreach (var term in Model.TermsConditions.Split('.', StringSplitOptions.RemoveEmptyEntries))
                            {
                                <li>@term.Trim().TrimEnd('.')</li>
                            }
                        </ul>
                    }

                    @{
                        var exclusion = Model?.Attributes?.FirstOrDefault(a => a.Key.ToLower() == "exclusions")?.Value;
                    }
                    @if (!string.IsNullOrWhiteSpace(exclusion))
                    {
                        <h3 class="details-section-heading">Exclusions</h3>
                        <ul class="details-list">
                            @foreach (var item in exclusion.Split(new[] { '.', ',' }, StringSplitOptions.RemoveEmptyEntries))
                            {
                                <li>@item.Trim()</li>
                            }
                        </ul>
                    }
                </div>
            </div>

            <!-- Right Column: The Sidebar -->
            <div class="col-lg-4">
                <div class="policy-sidebar">
                     @if (Model.Company != null)
                    {
                        <div class="sidebar-company-header">
                            <div class="logo-container">
                                <img src="@Url.Content("~" + (Model.Company.CompanyLogoPath ?? "companies/companyimages/default-logo.png"))" alt="@Model.Company.CompanyName Logo">
                            </div>
                            <h4 class="company-name">@Model.Company.CompanyName</h4>
                            <p class="company-tagline">Policy Provider</p>
                        </div>
                    }

                    <!-- All Details List -->
                    <div class="sidebar-details-list-container">
                        <div class="sidebar-details-item">
                            <div class="item-label">Policy Category</div>
                            <div class="item-value">@Model?.Category?.Name</div>
                        </div>
                        <div class="sidebar-details-item">
                            <div class="item-label">Status</div>
                            <div class="item-value @(Model?.Active == true ? "status-active" : "status-inactive")">
                                @(Model?.Active == true ? "Active" : "Inactive")
                            </div>
                        </div>

               
                        @{
                      
                            var excludedKeys = new List<string> { "exclusions", "sum insured", "premium", "tenure" };
                            var displayedAttributeKeys = new HashSet<string>();
                        }

                        @if (Model.Attributes != null && Model.Attributes.Any())
                        {
                            foreach (var attr in Model.Attributes)
                            {
                                var currentKey = attr.Key.Trim().ToLower();
                                if (!excludedKeys.Contains(currentKey) && !displayedAttributeKeys.Contains(currentKey))
                                {
                                    <div class="sidebar-details-item">
                                        <div class="item-label">@attr.Key</div>
                                        <div class="item-value">@attr.Value</div>
                                    </div>

                                    displayedAttributeKeys.Add(currentKey);
                                }
                            }
                        }
                    </div>

                    @if (Model.Company != null)
                    {
                        <div class="sidebar-contact-info">
                            @if (!string.IsNullOrWhiteSpace(Model.Company.PhoneNo))
                            {
                                <div class="contact-item"><i class="fas fa-phone-alt"></i> @Model.Company.PhoneNo</div>
                            }
                            @if (!string.IsNullOrWhiteSpace(Model.Company.Email))
                            {
                                <div class="contact-item"><i class="fas fa-envelope"></i> @Model.Company.Email</div>
                            }
                            @if (!string.IsNullOrWhiteSpace(Model.Company.Address))
                            {
                                <div class="contact-item"><i class="fas fa-map-marker-alt"></i> @Model.Company.Address</div>
                            }
                        </div>
                    }
                    @if (ViewBag.UserHasBoughtPolicy == true)
                    {
                        <div class="sidebar-button mt-3 text-white" style="background-color:#171827 ; cursor: default; opacity: 0.8; border:1px solid #f5a526 ;">
                            <i class="ti ti-check me-2"></i>Already Purchased
                        </div>
                    }
                    else
                    {
                        <a asp-action="CalculatePremium" asp-controller="UserHome" asp-route-id="@Model.Id" class="sidebar-button mt-3">Get This Policy</a>
                    }
                    <a href="#" id="addToCompareDetail" class="btn-compare mt-3" style="width:100%; justify-content:center;">
                        <i class="ti ti-arrows-left-right"></i>
                        <span>Add to Compare</span>
                    </a>
                </div>
            </div>
        </div>
    </div>
</section>
<div class="compare-bar" id="compareBar">
    <div class="container d-flex justify-content-between align-items-center">
        <div id="compareItems" class="d-flex flex-wrap"></div>
        <div class="d-flex align-items-center gap-2">
            <small id="compareHint" class="text-white-50 me-3"></small>
            <button id="compareNowBtn" class="compare-btn" disabled data-bs-toggle="modal" data-bs-target="#compareModal">Compare Now</button>
            <button id="compareClearBtn" class="btn btn-sm btn-outline-light">Clear</button>
        </div>
    </div>
    <input type="hidden" id="compareMax" value="3" />
    <input type="hidden" id="compareMin" value="2" />
    <input type="hidden" id="compareStorageKey" value="policyCompare" />
    <input type="hidden" id="compareUnauthorizedMsg" value="Only same category policies can be compared." />
    <input type="hidden" id="compareLimitMsg" value="You can compare up to 3 policies." />
</div>

<div class="compare-toast" id="compareToast"></div>

<div class="modal fade" id="compareModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-centered">
    <div class="modal-content" style="background:#171827; color:#fff;">
      <div class="modal-header border-0">
        <h5 class="modal-title">Compare Policies</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="table-responsive" style="max-height: 65vh; overflow: auto; border: 1px solid rgba(255,255,255,.08); border-radius: 8px;">
          <table class="table table-dark table-striped align-middle mb-0 compare-table">
            <thead>
              <tr id="cmp-head">
                <th class="sticky-col">Feature</th>
              </tr>
            </thead>
            <tbody id="cmp-body">
              <tr data-row="image"><th class="sticky-col">Preview</th></tr>
              <tr data-row="name"><th class="sticky-col">Name</th></tr>
              <tr data-row="company"><th class="sticky-col">Company</th></tr>
              <tr data-row="category"><th class="sticky-col">Category</th></tr>
              <tr data-row="status"><th class="sticky-col">Status</th></tr>
              <tr data-row="premium"><th class="sticky-col">Premium</th></tr>
              <tr data-row="suminsured"><th class="sticky-col">Sum Insured</th></tr>
              <tr data-row="tenure"><th class="sticky-col">Tenure</th></tr>
              <tr data-row="description"><th class="sticky-col">Description</th></tr>
              <tr data-row="action"><th class="sticky-col"></th></tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
  </div>

<script>
    (function(){
        const storageKey = document.getElementById('compareStorageKey').value;
        const maxItems = parseInt(document.getElementById('compareMax').value, 10) || 3;
        const minItems = parseInt(document.getElementById('compareMin').value, 10) || 2;
        const sameCatMsg = document.getElementById('compareUnauthorizedMsg').value;
        const limitMsg = document.getElementById('compareLimitMsg').value;
        const compareBar = document.getElementById('compareBar');
        const itemsWrap = document.getElementById('compareItems');
        const compareNowBtn = document.getElementById('compareNowBtn');
        const compareClearBtn = document.getElementById('compareClearBtn');
        const hint = document.getElementById('compareHint');
        const toast = document.getElementById('compareToast');

        function showToast(msg){
            toast.textContent = msg;
            toast.style.display = 'block';
            setTimeout(() => { toast.style.display = 'none'; }, 1500);
        }

        function getList(){ try { return JSON.parse(localStorage.getItem(storageKey) || '[]'); } catch { return []; } }
        function saveList(list){ localStorage.setItem(storageKey, JSON.stringify(list)); }

        function updateBar(){
            const list = getList();
            if (!list.length){ compareBar.style.display = 'none'; return; }
            compareBar.style.display = 'block';
            itemsWrap.innerHTML = '';
            list.forEach(p => {
                const pill = document.createElement('div');
                pill.className = 'compare-pill';
                pill.innerHTML = `<span>${p.name}</span><button data-remove="${p.id}">×</button>`;
                itemsWrap.appendChild(pill);
            });
            compareNowBtn.disabled = list.length < minItems;
            hint.textContent = list.length < minItems ? `Select ${minItems - list.length} more to compare` : '';
        }

        function add(policy){
            const list = getList();
            if (list.length) {
                if (list[0].category !== policy.category) { showToast(sameCatMsg); return; }
            }
            if (list.find(x => x.id === policy.id)) { showToast('Already added.'); return; }
            if (list.length >= maxItems) { showToast(limitMsg); return; }
            list.push(policy); saveList(list); updateBar(); showToast('Added to compare.');
        }

        function removeById(id){ const list = getList().filter(p => p.id !== id); saveList(list); updateBar(); }

        const btn = document.getElementById('addToCompareDetail');
        if(btn){
            btn.addEventListener('click', function(e){
                e.preventDefault();
                const p = {
                    id: @Model.Id,
                    name: '@(Model?.Name?.Replace("'", "\\'") ?? "")',
                    category: @Model.PolicyTypeId,
                    categoryName: '@(Model?.Category?.Name?.Replace("'", "\\'") ?? "")',
                    premium: @Model.Premium,
                    tenure: '@(Model?.Tenure?.Replace("'", "\\'") ?? "")',
                    suminsured: @Model.SumInsured,
                    company: '@(Model?.Company?.CompanyName?.Replace("'", "\\'") ?? "")',
                    description: '@((Model?.Description ?? string.Empty).Replace("\"","\\\"").Replace("\n"," ").Replace("\r"," "))',
                    image: '@Url.Content("~" + (Model?.BrochureUrl ?? "/user/assets/images/project/default.jpg"))',
                    active: @((Model?.Active ?? false).ToString().ToLower()),
                    companyPhone: '@(Model?.Company?.PhoneNo?.Replace("'", "\\'") ?? "")',
                    companyEmail: '@(Model?.Company?.Email?.Replace("'", "\\'") ?? "")',
                    companyAddress: '@(Model?.Company?.Address?.Replace("'", "\\'") ?? "")',
                    terms: '@((Model?.TermsConditions ?? string.Empty).Replace("\"","\\\"").Replace("\n"," ").Replace("\r"," "))',
                    exclusions: '@(Model?.Attributes?.FirstOrDefault(a => a.Key.ToLower() == "exclusions")?.Value?.Replace("'", "\\'") ?? "")'
                };
                add(p);
            });
        }

        document.addEventListener('click', function(e){
            if (e.target && e.target.matches('[data-remove]')){
                const id = parseInt(e.target.getAttribute('data-remove'), 10);
                removeById(id);
            }
        });

        const compareModal = document.getElementById('compareModal');
        compareModal.addEventListener('show.bs.modal', function(){

            const list = getList();
            const head = document.getElementById('cmp-head');
            const body = document.getElementById('cmp-body');
            head.innerHTML = '<th>Feature</th>';
            Array.from(body.querySelectorAll('tr')).forEach(tr => {
                const th = tr.querySelector('th');
                tr.innerHTML = '';
                if (th) tr.appendChild(th);
            });
          
            const ensureRow = (id, label) => {
                if (!body.querySelector(`tr[data-row="${id}"]`)) {
                    const tr = document.createElement('tr'); tr.setAttribute('data-row', id);
                    const th = document.createElement('th'); th.className = 'sticky-col'; th.textContent = label; tr.appendChild(th);
                    body.appendChild(tr);
                }
            };
            const attrKeys = new Set();
            list.forEach(p => { (p.attributes || []).forEach(a => { if (a && a.key) attrKeys.add(a.key); }); });
            ensureRow('companyPhone', 'Company Phone');
            ensureRow('companyEmail', 'Company Email');
            ensureRow('companyAddress', 'Company Address');
            ensureRow('terms', 'Terms & Conditions');
            ensureRow('exclusions', 'Exclusions');
            Array.from(attrKeys).forEach(k => ensureRow(`attr_${k}`, k));

            list.forEach(p => {
                const col = document.createElement('th'); col.textContent = p.name; head.appendChild(col);
                function td(val, html=false){ const el = document.createElement('td'); if(html){ el.innerHTML = val; } else { el.textContent = val || '-'; } return el; }
                const imgHtml = p.image ? `<img src='${p.image}' alt='${p.name}' style='width:100px;height:60px;object-fit:cover;border-radius:6px;border:1px solid rgba(255,255,255,.1);'/>` : '-';
                body.querySelector('tr[data-row="image"]').appendChild(td(imgHtml, true));
                body.querySelector('tr[data-row="name"]').appendChild(td(p.name));
                body.querySelector('tr[data-row="company"]').appendChild(td(p.company));
                body.querySelector('tr[data-row="category"]').appendChild(td(p.categoryName));
                const statusBadge = `<span class='badge ${p.active ? 'bg-success' : 'bg-danger'}'>${p.active ? 'Active' : 'Inactive'}</span>`;
                body.querySelector('tr[data-row="status"]').appendChild(td(statusBadge, true));
                body.querySelector('tr[data-row="premium"]').appendChild(td(p.premium.toLocaleString()))
                body.querySelector('tr[data-row="suminsured"]').appendChild(td(p.suminsured.toLocaleString()))
                body.querySelector('tr[data-row="tenure"]').appendChild(td(p.tenure));
                const descShort = (p.description || '').toString();
                body.querySelector('tr[data-row="description"]').appendChild(td(descShort));
                body.querySelector('tr[data-row="companyPhone"]').appendChild(td(p.companyPhone || ''));
                body.querySelector('tr[data-row="companyEmail"]').appendChild(td(p.companyEmail || ''));
                body.querySelector('tr[data-row="companyAddress"]').appendChild(td(p.companyAddress || ''));
                body.querySelector('tr[data-row="terms"]').appendChild(td(p.terms || ''));
                body.querySelector('tr[data-row="exclusions"]').appendChild(td(p.exclusions || ''));
                (Array.from(attrKeys)).forEach(k => {
                    const found = (p.attributes || []).find(a => a && a.key === k);
                    const row = body.querySelector(`tr[data-row="attr_${k}"]`);
                    if (row) row.appendChild(td(found ? found.value : '-'));
                });
                const actionTd = document.createElement('td');
                actionTd.innerHTML = `<a href='@Url.Action("ViewPolicyDetails", "UserHome")/${p.id}' class='btn btn-sm btn-warning fw-bold'>Get This Policy</a>`;
                body.querySelector('tr[data-row="action"]').appendChild(actionTd);
            });
        });

        updateBar();
    })();
</script>